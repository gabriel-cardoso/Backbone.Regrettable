// Generated by CoffeeScript 1.6.2
(function() {
  var Action, Backbone, CollectionAddAction, CollectionRemoveAction, ModelPropertyUpdateAction, ModelUpdateAction, _,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _ = typeof require !== "undefined" && require !== null ? require("underscore") : window._;

  Backbone = typeof require !== "undefined" && require !== null ? require("backbone") : window.Backbone;

  Action = (function() {
    function Action() {}

    Action.prototype.undo = function() {};

    Action.prototype.redo = function() {};

    return Action;

  })();

  CollectionAddAction = (function(_super) {
    __extends(CollectionAddAction, _super);

    function CollectionAddAction(collection, model, caid) {
      this.collection = collection;
      this.model = model;
      this.caid = caid;
    }

    CollectionAddAction.prototype.undo = function() {
      return this.model.destroy();
    };

    CollectionAddAction.prototype.redo = function() {
      this.model = this.model.clone();
      return this.collection.add(this.model);
    };

    return CollectionAddAction;

  })(Action);

  CollectionRemoveAction = (function(_super) {
    __extends(CollectionRemoveAction, _super);

    function CollectionRemoveAction(collection, model, caid) {
      this.collection = collection;
      this.model = model;
      this.caid = caid;
    }

    CollectionRemoveAction.prototype.undo = function() {
      this.model = this.model.clone();
      return this.collection.add(this.model);
    };

    CollectionRemoveAction.prototype.redo = function() {
      return this.model.destroy();
    };

    return CollectionRemoveAction;

  })(Action);

  ModelPropertyUpdateAction = (function(_super) {
    __extends(ModelPropertyUpdateAction, _super);

    function ModelPropertyUpdateAction(model, prop, newVal, oldVal, caid) {
      this.model = model;
      this.prop = prop;
      this.newVal = newVal;
      this.oldVal = oldVal;
      this.caid = caid;
    }

    ModelPropertyUpdateAction.prototype.undo = function() {
      return this.model.set(this.prop, this.oldVal);
    };

    ModelPropertyUpdateAction.prototype.redo = function() {
      return this.model.set(this.prop, this.newVal);
    };

    return ModelPropertyUpdateAction;

  })(Action);

  ModelUpdateAction = (function(_super) {
    __extends(ModelUpdateAction, _super);

    function ModelUpdateAction(model, caid) {
      var attr, newVal, _ref;

      this.model = model;
      this.caid = caid;
      this.actions = [];
      _ref = this.model.changedAttributes();
      for (attr in _ref) {
        newVal = _ref[attr];
        this.actions.push(new ModelPropertyUpdateAction(this.model, attr, newVal, this.model.previous(attr), this.caid));
      }
    }

    ModelUpdateAction.prototype.undo = function() {
      return _.invoke(this.actions, 'undo');
    };

    ModelUpdateAction.prototype.redo = function() {
      return _.invoke(this.actions, 'redo');
    };

    return ModelUpdateAction;

  })(Action);

  Backbone.Regrettable = (function() {
    var composite, redoStack, redoing_caid, tracking, undoStack, undoing_caid;

    undoStack = [];
    redoStack = [];
    tracking = true;
    composite = false;
    redoing_caid = void 0;
    undoing_caid = void 0;
    return {
      tracking: function(t) {
        return tracking = t;
      },
      undoStack: function() {
        return undoStack;
      },
      redoStack: function() {
        return redoStack;
      },
      undo: function(caid) {
        var action;

        if (undoStack.length === 0 || ((caid != null) && caid !== _.last(undoStack).caid)) {
          return;
        }
        try {
          tracking = false;
          action = undoStack.pop();
          action.undo();
          redoStack.push(action);
          if (action.caid) {
            return this.undo(action.caid);
          }
        } finally {
          tracking = true;
        }
      },
      redo: function(caid) {
        var action;

        if (redoStack.length === 0 || ((caid != null) && caid !== _.last(redoStack).caid)) {
          return;
        }
        try {
          tracking = false;
          action = redoStack.pop();
          action.redo();
          undoStack.push(action);
          if (action.caid) {
            return this.redo(action.caid);
          }
        } finally {
          tracking = true;
        }
      },
      hasUndo: function() {
        return undoStack.length > 0;
      },
      hasRedo: function() {
        return redoStack.length > 0;
      },
      reset: function() {
        undoStack = [];
        return redoStack = [];
      },
      startComposite: function() {
        return composite = _.uniqueId("ca");
      },
      stopComposite: function() {
        return composite = void 0;
      },
      bind: function(o, opts) {
        var ignore;

        if (opts == null) {
          opts = {};
        }
        ignore = opts.ignore || (function() {
          return false;
        });
        if (o instanceof Backbone.Model) {
          return o.on("change", function(model, opts) {
            if (tracking && !ignore(model, opts)) {
              redoStack = [];
              return undoStack.push(new ModelUpdateAction(model, composite ? composite : void 0));
            }
          });
        } else if (o instanceof Backbone.Collection) {
          o.on("add", function(prod, coll, opts) {
            if (tracking && !ignore(prod, coll, opts)) {
              redoStack = [];
              return undoStack.push(new CollectionAddAction(o, prod, composite ? composite : void 0));
            }
          });
          return o.on("remove", function(prod, coll, opts) {
            if (tracking && !ignore(prod, coll, opts)) {
              redoStack = [];
              return undoStack.push(new CollectionRemoveAction(o, prod, composite ? composite : void 0));
            }
          });
        }
      }
    };
  })();

  if ((typeof module !== "undefined" && module !== null ? module.exports : void 0) != null) {
    _.extend(Backbone.Regrettable, {
      CollectionAddAction: CollectionAddAction,
      CollectionRemoveAction: CollectionRemoveAction,
      ModelUpdateAction: ModelUpdateAction
    });
    module.exports = Backbone.Regrettable;
  }

}).call(this);
